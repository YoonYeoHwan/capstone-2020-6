# Generated by Django 2.1.9 on 2020-05-04 08:35

import backend.validation
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=30, validators=[backend.validation.validate_email])),
                ('phone', models.CharField(max_length=30, validators=[backend.validation.validate_phone])),
                ('point', models.IntegerField(default=0)),
                ('reliability', models.FloatField(default=0)),
                ('is_requester', models.BooleanField(default=False)),
                ('is_robot', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=15, validators=[backend.validation.validate_category_type])),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Labeling',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(auto_now=True)),
                ('end_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='PaymentLog',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.TextField(validators=[backend.validation.validate_paymentlog_type])),
                ('note', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField(auto_now_add=True, validators=[backend.validation.validate_date])),
                ('due_date', models.DateTimeField(validators=[backend.validation.validate_date], verbose_name='due date')),
                ('current_cycle', models.IntegerField(default=0)),
                ('max_cycle', models.IntegerField(default=0)),
                ('total_point', models.IntegerField(default=0)),
                ('is_captcha', models.BooleanField(default=False)),
                ('state', models.CharField(choices=[('RED', 'before_permission'), ('RUN', 'running'), ('END', 'end')], default='RED', max_length=3)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Category')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='paymentlog',
            name='request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Request'),
        ),
        migrations.AddField(
            model_name='paymentlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='labeling',
            name='request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Request'),
        ),
        migrations.AddField(
            model_name='labeling',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
    ]
